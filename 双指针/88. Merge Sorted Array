/*
题目：
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
Note:
The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:
Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3
Output: [1,2,2,3,5,6]
解析：
注意数组nums1只有索引0，m-1有数字，后面是0。
方法1：使用一个中间变量储存比较结果，再向nums1赋值。
双指针i,j分别指向数组1和2的起始索引，比较元素大小放入中间变量。
这里需要注意的是，当一个指针超范围时，如i=m，此时不能访问nums[i]，而是
应把nums2中的数值顺序放入中间变量res，直至j超范围。
*/
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=0,j=0;//双指针分别指向两个数组的索引
        vector<int> res;//中间变量
        while(i<m||j<n)
       {
           if(i==m)
           {
               res.push_back(nums2[j++]);//当有一个指针超范围时，说明这个数组的元素已经使用完毕，
                                         //又由于两个数组都是排序数组，所以只要将另一个数组中的元素顺序放入res中即可。
               continue;//使用continue保证不再访问超范围的数组，否则会段错误。
           }
           if(j==n)
           {
               res.push_back(nums1[i++]);
               continue;
            }
           if(nums1[i]<=nums2[j])
               res.push_back(nums1[i++]);
           else
               res.push_back(nums2[j++]);
       }
        for(int k=0;k<m+n;k++)
        {
            nums1[k]=res[k];//将中间变量的值赋给nums1，完成要求
        }
    }
};
