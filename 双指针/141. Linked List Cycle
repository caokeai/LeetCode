/*
题目:
Given a linked list, determine if it has a cycle in it.
To represent a cycle in the given linked list, we use an integer pos which represents the position 
(0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.
Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the first node.
Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
解析：
快慢指针法，一个慢指针指向链表头，一个快指针指向链表第二个元素。
慢指针每次移动一个位置，快指针每次移动两个位置。
若链表有环，则必会出现慢指针==快指针的情况。
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL)
            return false;
        ListNode* p1=head;//慢指针起点0
        ListNode* p2=head->next;//快指针起点1
        while(p1!=NULL&&p2!=NULL)
        {
            if(p1==p2)
                return true;
            p1=p1->next;//慢指针移动一个位置
            if(p2->next==NULL)
                break;//这里当p2->next==NULL时，访问p2->next->next会段错误
            p2=p2->next->next;//快指针每次移动两个元素
        }
        return false;
    }
};
