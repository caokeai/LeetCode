/*
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
上图是一个部分填充的有效的数独。
数独部分空格内已填入了数字，空白格用 '.' 表示。
示例 1:
输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:
输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:
一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int n=board[0].size();
        //判断每行
        for(int i=0;i<n;i++)
        {
            unordered_map<char,bool> exist;//9个数字的哈希表
            for(int j=0;j<n;j++)
            {
                if(board[i][j]!='.')
                {
                    if(exist.count(board[i][j])!=0)//重复数字 退出
                        return false;
                    else
                        exist[board[i][j]]=true;//不重复数字入表
                }
            }
        }
        //判断每列
        for(int i=0;i<n;i++)
        {
            unordered_map<char,bool> exist;
            for(int j=0;j<n;j++)
            {
                if(board[j][i]!='.')
                {
                    if(exist.count(board[j][i])!=0)
                        return false;
                    else
                        exist[board[j][i]]=true;
                }
            }
        }
        //判断3宫格 9x9的矩阵共有9个3x3的3宫格 先行后列
        int i=0,j=0;
        while(1)
        {
            int r=i+3;
            int c=j+3;
            unordered_map<char,bool> exist;//每个3宫格的哈希表
            int jVal=j;//注意内层循环每次进入都要复原索引 否则只有第一个外层循环有效
            for(i;i<r;i++)
                for(j=jVal;j<c;j++)
                {
                    if(board[i][j]!='.')
                    {
                    if(exist.count(board[i][j])!=0)
                       return false;
                    else
                       exist[board[i][j]]=true;
                    }
                }
            if(j>8)//一行结束 到下一行3宫格 因为上述循环 i已经更新 索引不将i复原即是跳过下一行3宫格
            {
                j=0;//列从头开始
                if(i>8)
                    break;//行遍历结束 跳出循环
            }
            else
            {
                i-=3;//当前行未检查完 行标复原
            }
        }
        return true;
    }
};
