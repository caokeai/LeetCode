/*
编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：
每行的元素从左到右升序排列。
每列的元素从上到下升序排列。
示例:
现有矩阵 matrix 如下：
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。
给定 target = 20，返回 false。
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-a-2d-matrix-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty())
            return false;//边界条件 矩阵空直接返回false
        int m=matrix.size();//行数
        int n=matrix[0].size();//列数
        int l=0,r=n-1;//右上角点 从此出发根据matrix和target的大小关系有唯一对应移动方向
        while(l<m&&r>=0)
        {
            if(matrix[l][r]==target)
                return true;//找到 返回true
            else if(matrix[l][r]<target)
                l++;//当前值较小 向下移动
            else
                r--;//当前值较大 向左移动
        }
        return false;//未搜索到
    }
};
