/*
根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。
给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。
每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：
如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，
其中细胞的出生和死亡是同时发生的。
示例:
输入: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
进阶:
你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？
*/


class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int m=board.size();//行
        int n=board[0].size();//列
        vector<vector<int>> res(m,vector<int>(n,0));//更新状态 初始值全为死细胞
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==1)//活细胞
                {
                    int cur=liveNum(board,m,n,i,j);
                    if(cur>=2&&cur<=3)//周围有2或3个活细胞
                        res[i][j]=1;//继续存活
                }
                else//死细胞
                {
                    if(liveNum(board,m,n,i,j)==3)//周围有3个活细胞
                        res[i][j]=1;//复活
                }
            }
        board.clear();//删除旧状态
        board=res;//新状态
    }
    int liveNum(vector<vector<int>>& board,int m,int n,int r,int c)
    {
        int res=0;
        for(int i=r-1;i<=r+1;i++)//三行
            for(int j=c-1;j<=c+1;j++)//三列
            {
                if(i<0||i>=m||j<0||j>=n)
                    continue;//超范围 不计入
                if(i==r&&j==c)
                    continue;//当前细胞 不计入
                if(board[i][j]==1)
                    res++;//活细胞数目+1
            }
        return res;
    }
};
