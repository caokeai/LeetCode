/*
题目：
Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.
Example 1:
Input: 5
Output: True
Explanation:
The binary representation of 5 is: 101
Example 2:
Input: 7
Output: False
Explanation:
The binary representation of 7 is: 111.
Example 3:
Input: 11
Output: False
Explanation:
The binary representation of 11 is: 1011.
Example 4:
Input: 10
Output: True
Explanation:
The binary representation of 10 is: 1010.
解析：
给定一个非负数，判断其二进制中，有无连续相同的位。
如0100,false; 0101,ture
依次取该数字的最低位，并保留，判断其与高一位是否相同。
若不同，更新低位，再与更高位判断。否则输出false
*/
class Solution {
public:
    bool hasAlternatingBits(int n) {
        int pre=n&1;//取最低位
        while(n>0)//因为n为正数，所以右移的最终结果为0
        {
            n=n>>1;//使当前位位于最低位
            int cur=n&1;//取当前位
            if(pre==cur)
                return false;//比较
            else
                pre=cur;//更新当前位
        }
        return true;
    }
};
