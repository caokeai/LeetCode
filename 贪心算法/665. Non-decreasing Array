/*
题目：
Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.
We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).
Example 1:
Input: [4,2,3]
Output: True
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:
Input: [4,2,1]
Output: False
Explanation: You can't get a non-decreasing array by modify at most one element.
Note: The n belongs to [1, 10,000].
给定一个数组，判断是否可以只修改一个元素的值，从而使得数组为非减数组。
解析：
贪心算法的本质是如果局部最优，即可全局最优(这里只考虑线性问题)
所以 4,2,3的修改方式是 2,2,3即将前一个修改为等于当前值，这样当前值未变大
这样修改后，前面的值只可能小于或等于当前值，因为大于的被修改为了等于
特殊情况是，当出现3,3,2这种情况时，修改i-1的值不能满足非减，而是要修改i的值
*/
class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        if(nums.size()==1||nums.size()==2)
            return true;//数组元素为1,2时肯定满足，不需要下面判断
        int size=nums.size();
        int res=0;//修改次数
        for(int i=0;i<size;i++)
        {
            if(i>=1&&nums[i]<nums[i-1])//如果相邻两个不满足，nums[i-1=]3,nums[i]=2,则应修改nums[i-1]=nums[i]，这样nums[i]不会增大
            {
                res++;
                if(i>=2&&nums[i]<nums[i-2])//根据上面的修改，可能出现nums[i-2=]3,nums[i-1]=3,nums[i]=2这样的情况，
                                          //此时应该修改nums[i]=nums[i-1]，否则不满足题意
                    nums[i]=nums[i-1];
                else
                    nums[i-1]=nums[i];
            }
            if(res>1)
                return false;//若修改次数大于1次，直接返回false，不需进行下面的判断，节省时间。
        }
        return true;
    }
};
