/*
题目：
A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate 
between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence 
with fewer than two elements is trivially a wiggle sequence.
For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and 
negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences 
are positive and the second because its last difference is zero.
Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is 
obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining 
elements in their original order.
Example 1:
Input: [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence.
Example 2:
Input: [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].
Example 3:
Input: [1,2,3,4,5,6,7,8,9]
Output: 2
Follow up:
Can you do it in O(n) time?
解析：
给定一个数组，判断该数组的最大摇摆子序列。摇动序列的意思是增大减小相间隔，即前后两个差值一正一负。
动态规划法，
使用两个变量分别记录前面增大的数字和减小的数字，
如果当前的值比前一个大,则减小的序列长度+1，
如果当前的值比前一个小，则增大的序列长度+1
最后输出这两个变量中的大值。
*/
class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int size=nums.size();
        int big=1,small=1;//初值
        for(int i=1;i<size;i++)
        {
            if(nums[i]>nums[i-1])
                big=small+1;//当前值大于前一个值，那么下一个应该是要减小才对
            if(nums[i]<nums[i-1])
                small=big+1;//反之同理。
        }
        return max(big,small);
    }
};
