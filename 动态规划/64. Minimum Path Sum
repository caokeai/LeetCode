/*
题目：
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which 
minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
Example:
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
解析：
给定一个二维矩阵，矩阵元素的值为距离，求从矩阵左上角到右下角的最短路径。
矩阵左上角到右下角路径总数的变体。动态规划的递推公式为：
dp[m][n]=min(dp[m-1][n]+grid[m][n],dp[m][n-1]+grid[m][n])
要到达矩阵右下角元素，因为只能向右和向下走，所以要到达矩阵右下角元素grid[m][n]必须先到达其上边一个元素grid[m-1][n]
或者左边一个元素grid[m][n-1]，则最短路径为到达这两个点的最短路径+矩阵右下角元素值，两者中的最小值。
方法一: 使用二维矩阵保存路径长度
*/

//方法一
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty())
            return 0;//预判断
        int m=grid.size();//行
        int n=grid[0].size();//列
        vector<vector<int>> dp(m,vector<int>(n,0));//最短路径递推结果
        dp[0][0]=grid[0][0];//初始值，1x1矩阵，最短路径为grid[0][0]值
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if(i-1>=0&&j-1>=0)
                    dp[i][j]=min(dp[i-1][j]+grid[i][j],dp[i][j-1]+grid[i][j]);//行-1和列-1都存在时，分别-1+当前元素的最小值即为最短路径
                if(i-1>=0&&j-1<0)
                    dp[i][j]=dp[i-1][j]+grid[i][j];//只有一列的情况
                if(i-1<0&&j-1>=0)
                    dp[i][j]=dp[i][j-1]+grid[i][j];//只有一行的情况
            }
        return dp[m-1][n-1];
    }
};
