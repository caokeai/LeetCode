/*
题目：
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. 
All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, 
adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were 
broken into on the same night.
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money 
you can rob tonight without alerting the police.
Example 1:
Input: [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),
             because they are adjacent houses.
Example 2:
Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
解析：
盗贼问题的变体，房子变成了循环房子，即最后一个房子与第一个房子是相邻的，不能同时偷。
将原数组分解为两个子数组，分别求盗贼问题，再求这两个值的最大值即可。
输入数组arr[0]-arr[n]分解为arr[0]-arr[n-1]以及arr[1]-arr[n]
对这两个数组求解盗贼问题。
*/
class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int size=nums.size();
        if(size==1)
            return nums[0];
        if(size==2)
            return max(nums[0],nums[1]);
        if(size==3)//与盗贼问题不同在于，输入数组的长度比子数组长1，所以应从输入数组长度为4的时候开始递推计算盗贼问题
            return max(nums[0],max(nums[1],nums[2]));//输入长度为3，首尾是相邻房间，所以是三个值中的最大值。
        vector<int> nums1,nums2;
        for(int i=0;i<size-1;i++)
            nums1.push_back(nums[i]);//子数组1，nums[0]-nums[size-2]
        for(int i=1;i<size;i++)
            nums2.push_back(nums[i]);//子数组2，nums[1]-nums[size-1]
        size=nums1.size();//数组长度变为子数组长度
        vector<int> dp(size,0);//储存递推结果
        dp[0]=nums1[0];//偷第1间房屋
        dp[1]=nums1[1];//偷第2间房屋
        dp[2]=nums1[2]+nums1[0];//偷第3间房屋
        for(int i=3;i<size;i++)
            dp[i]=max(dp[i-2],dp[i-3])+nums1[i];//递推公式
        int nums1max=max(dp[size-1],dp[size-2]);//子数组1的最大偷窃数目
        dp[0]=nums2[0];
        dp[1]=nums2[1];
        dp[2]=nums2[0]+nums2[2];
        for(int i=3;i<size;i++)
            dp[i]=max(dp[i-2],dp[i-3])+nums2[i];
        int nums2max=max(dp[size-1],dp[size-2]);//子数组2的最大偷窃数目
        return max(nums1max,nums2max);
    }
};
