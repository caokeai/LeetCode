/*
题目：
You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. 
For each integer, you should choose one from + and - as its new symbol.
Find out how many ways to assign symbols to make sum of integers equal to target S.
Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
There are 5 ways to assign symbols to make the sum of nums be target 3.
Note:
The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.
解析：
给定一个非负数组 其中每个数字的符号可正可负 求共有多少种不同的符号组合 使数组的和为指定值。
这里与将数组分割为两个和相同的数组，区别在于，数组中可能有0.
假设数组中符号为正的为p，符号为负的为n，有s(p)+s(n)=sum,s(p)-s(n)=target
所有有s(p)+s(n)+s(p)-s(n)=target+s(p)+s(n)
有2s(p)=target+sum
s(p)=(target+sum)/2
因此原数组中 p的不同组合个数即为这里的符号组合。
*/
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int s) {
        int size=nums.size();
        int sum=0;
        for(int i=0;i<size;i++)
            sum+=nums[i];
        if(sum<s)
            return 0;
        sum+=s;
        if(sum%2!=0)
            return 0;
        sum=sum/2;
        vector<vector<int>>dp(size+1,vector<int>(sum+1,0));
        dp[0][0]=1;
        for(int i=1;i<size+1;i++)
            for(int j=0;j<sum+1;j++)//考虑到数组中的0，j从0开始递推
            {
                dp[i][j]=dp[i-1][j];
                if(nums[i-1]<=j)
                    dp[i][j]+=dp[i-1][j-nums[i-1]];//递推公式如上一个题目的dp，只是逻辑或变成了+，因为求不同组合的个数
            }
        return dp[size][sum];
    }
};
