/*
题目：
Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers.
Return the maximum product you can get.
Example 1:
Input: 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:
Input: 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
Note: You may assume that n is not less than 2 and not larger than 58.
解析：给定一个整数，将其拆分为数字之和，其这些数字的最大乘积。
2 1+1 1
3 1+2 2
4 2+2 4
5 3+2 6
6 3+3 9
7 3+4 12
8 3+3+2 18
9 3+3+3 27
当n<=4时，拆分的乘积<=不拆分 
当n>4时，优先拆出3直到剩下的部分<=4
*/
class Solution {
public:
    int integerBreak(int n) {
        if(n==2)
            return 1;
        if(n==3)
            return 2;
        if(n==4)
            return 4;
        int res=1;
        while(n>4)//直到拆分的部分<=4，此时拆分的乘积<不拆分
        {
            res*=3;//优先拆3
            n-=3;
        }
        return res*n;//n最后不能拆分的<=4的部分
    }
};
