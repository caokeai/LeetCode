/*
题目：
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
解析：
一个台阶共有n阶，每次可以爬一阶或者2阶。求爬上n阶台阶，共有多少种不同的爬法。
斐波那契数列问题，利用动态规划法求解。设爬上n阶台阶共有s(n)种方法
n   s(n)
1   1     1
2   2     11 2
3   3     111 12 21
4   5     1111 121 112 211 121
k   s(k)=s(k-1)+s(k-2)
这里当前值仅与相邻两个值有关，因此只需要两个变量保存前两个值即可。
*/
class Solution {
public:
    int climbStairs(int n) {
        if(n==1)
            return 1;//n为1时只有一种
        if(n==2)
            return 2;//n为2时只有两种
        int pre2=1;
        int pre1=2;
        int res=0;
        while(n-->2)
        {
            res=pre1+pre2;//当前值的种数
            pre2=pre1;//更新前一个的前一个值
            pre1=res;//更新前一个值
        }
        return res;
    }
};
