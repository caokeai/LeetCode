/*
给你一个以字符串形式表述的 布尔表达式（boolean） expression，返回该式的运算结果。
有效的表达式需遵循以下约定：
"t"，运算结果为 True
"f"，运算结果为 False
"!(expr)"，运算过程为对内部表达式 expr 进行逻辑 非的运算（NOT）
"&(expr1,expr2,...)"，运算过程为对 2 个或以上内部表达式 expr1, expr2, ... 进行逻辑 与的运算（AND）
"|(expr1,expr2,...)"，运算过程为对 2 个或以上内部表达式 expr1, expr2, ... 进行逻辑 或的运算（OR）
示例 1：
输入：expression = "!(f)"
输出：true

示例 2：
输入：expression = "|(f,t)"
输出：true

示例 3：
输入：expression = "&(t,f)"
输出：false

示例 4：
输入：expression = "|(&(t,f,t),!(t))"
输出：false
 
提示：
1 <= expression.length <= 20000
expression[i] 由 {'(', ')', '&', '|', '!', 't', 'f', ','} 中的字符组成。
expression 是以上述形式给出的有效表达式，表示一个布尔值。
*/


class Solution {
public:
    bool parseBoolExpr(string expression) {
        stack<char> s;//辅助栈
        bool res;//最终结果
        for(auto p:expression)//遍历字符串形式的逻辑表达式
        {
            if(p!=')')
                s.push(p);//只要不是右括号那么入栈
            else
            {
                s.push(p);//遇到右括号 从栈中取出一个子逻辑表达式并计算 结果入栈
                string temp;//储存子逻辑表达式
                while(s.top()!='(')//从栈中取出表达式
                {
                    temp+=s.top();
                    s.pop();
                }
                temp+=s.top();// 表达式增加'('
                s.pop();
                temp+=s.top();// 表达式增加逻辑操作符号
                s.pop();
                reverse(temp.begin(),temp.end());//反转 求正常顺序的子逻辑表达式
                bool cur=help(temp);//计算子逻辑表达式的值
                if(cur)
                    s.push('t');//结果入栈
                else
                    s.push('f');//结果入栈
            }
        }
        return s.top()=='t'? true:false;//最后栈中为整个逻辑表达式的结果 返回即可
    }
    bool help(string s)//计算一个子逻辑表达式 即只有一个（）的逻辑表达式
    {
        if(s[0]=='!')//逻辑非
        {
            if(s[2]=='f')// false取非为true
                return true;
            else
                return false;//true取非为false
        }
        else if(s[0]=='|')//逻辑或
        {
            for(auto p:s)
                if(p=='t')//有一个为true
                    return true;//返回true
            return false;//否则返回false
        }
        else//逻辑与
        {
            for(auto p:s)
                if(p=='f')//有一个为false
                    return false;//返回false
            return true;//否则返回true
        }
    }
};
