/*
题目：
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes 
of the first two lists.
Example:
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
解析：
方法一:使用递归方法，判断两个链表当前值大小，小的做为当前节点，
*/
//方法一 递归
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;//l1空，直接返回l2的节点
        if(l2==NULL)
            return l1;//l2空，直接返回l1的节点
        ListNode* res=NULL;
        if(l1->val<=l2->val)
        {
            res=l1;
            res->next=mergeTwoLists(l1->next,l2);
        }
        else
        {
            res=l2;
            res->next=mergeTwoLists(l1,l2->next);
        }
        return res;
    }
};

//方法二 非递归 遍历两个链表并比较 重建链表
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
            return l2;//预判断l1和l2
        if(l2==NULL)
            return l1;
        ListNode* res=new ListNode(1);//新链表头
        ListNode* p=res;//新链表假头，构建链表
        while(l1!=NULL||l2!=NULL)//当l1==NULL&&l2==NULL时退出
        {
            if(l1==NULL)//第一种情况，l1为空，直接以l2当前节点做为新链表下个节点
           {
                p->next=l2;
                l2=l2->next;
                p=p->next;
           }
            else if(l2==NULL)//第二种情况，l2为空，直接以l1当前节点做为新链表下个节点
            {
                p->next=l1;
                l1=l1->next;
                p=p->next;
            }
            else if(l1->val<=l2->val)//第三种情况，l1和l2非空，比较值大小，小的做为新链表当前节点
            {
                p->next=l1;
                l1=l1->next;
                p=p->next;
            }
            else
            {
                p->next=l2;
                l2=l2->next;
                p=p->next;
            }
        }
        return res->next;//同样的问题，声明时不能为空，所以多一个节点，应该输出res->next
    }
};
