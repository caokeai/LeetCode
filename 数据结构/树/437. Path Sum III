/*
题目：
You are given a binary tree in which each node contains an integer value.
Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go 
downwards (traveling only from parent nodes to child nodes).
The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
Example:
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1
Return 3. The paths that sum to 8 are:
1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
解析：
1.递归法 从根节点出发，注意路径不一定是从根节点到叶节点。检索到叶结点为止，但是中间只要路径和为sum，结果就+1
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if(root==NULL)
            return 0;
        int res=subPathSum(root,sum)+pathSum(root->left,sum)+pathSum(root->right,sum);
        //从root开始的路径，从root->left开始的路径 从root->right开始的路径
        return res;
    }
    int subPathSum(TreeNode* root,int sum)
    {
        if(root==NULL)
            return 0;
        int res=0;
        if(root->val==sum)
            res++;//到当前节点路径之和==sum，路径数+1
        res+=subPathSum(root->left,sum-root->val)+subPathSum(root->right,sum-root->val);
        //因为节点可能为负数，所以继续检索左右节点
        return res;
    }
};
