/*
题目：
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed 
to the original key plus sum of all keys greater than the original key in BST.
Example:
Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13
Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
解析:
给定一颗二叉搜索树，将其每个节点的值改为该节点值与所有比他大的值。
方法一：迭代法。求二叉搜索树的中序遍历，得到有序数组。遍历二叉树（按层遍历），按照每个节点的值，求其在数组中的位置i，修改其值为与所有大于i的数组
元素之和。
方法二：递归法。
*/
//方法一
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        if(root==NULL)
            return NULL;
        vector<int> arr;//储存二叉搜索树的中序遍历
        unordered_map<int,int> m;//每个树节点的值及其在数组中的位置
        inOrder(root,arr);//求有序数组
        int size=arr.size();
        for(int i=0;i<size;i++)
            m[arr[i]]=i;//构建节点值和在数组中索引的哈希表
        queue<TreeNode*> q;//辅助队列，用于按层遍历二叉搜索树，修改每个节点的值
        q.push(root);
        while(!q.empty())
        {
            TreeNode* temp=q.front();//获取当前节点
            q.pop();
            int k=m.find(temp->val)->second;//获取当前节点在有序数组的位置
            for(int i=k+1;i<size;i++)
                temp->val+=arr[i];//与数组之后的所有数字（比其值大）相加
            if(temp->left!=NULL)
                q.push(temp->left);//先左
            if(temp->right!=NULL)
                q.push(temp->right);//后右
        }
        return root;
    }
    void inOrder(TreeNode* root,vector<int>& v)//求二叉搜索树的中序遍历 得到有序数组
    {
        if(root==NULL)
            return;
        inOrder(root->left,v);
        v.push_back(root->val);
        inOrder(root->right,v);
    }
};

//方法二
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int sum=0;
public:
    TreeNode* convertBST(TreeNode* root) {
        helper(root);
        return root;
    }
    void helper(TreeNode* root)
    {
        if(root==NULL)
            return;
        if(root->right!=NULL)
            helper(root->right);
        sum+=root->val;
        root->val=sum;
        if(root->left!=NULL)
            helper(root->left);
    }
};
