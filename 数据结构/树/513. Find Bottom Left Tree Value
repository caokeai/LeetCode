/*
题目：
Given a binary tree, find the leftmost value in the last row of the tree.
Example 1:
Input:

    2
   / \
  1   3
Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7
Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.
解析：给定一个二叉树，寻找左下角节点。左下角节点即为最后一层的最左侧元素。
题目限定了树非空。
方法1：修改按层遍历的顺序，使其按照先上后下，先右后左的顺序遍历。这样遍历的最后一个节点即为
左下角角点。
方法2：不修改按层遍历的顺序，但是到达最后一层时，输出最后一层的第一个节点。优点是相比于方法1，
变量保存的次数减少。方法一需要保存所有当前节点，而方法二只需要保存每一层的第一个节点。时间复杂度优。
*/

//方法一
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> q;//辅助队列
        q.push(root);//根节点入队列
        int res=0;
        while(!q.empty())
        {
            TreeNode* temp=q.front();//当前节点
            q.pop();
            res=temp->val;
            if(temp->right!=NULL)
                q.push(temp->right);//先右
            if(temp->left!=NULL)
                q.push(temp->left);//后左
        }
        return res;
    }
};

//方法二
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> q;//辅助队列
        q.push(root);//根节点入队列
        int res=0;//题目限定树非空
        while(!q.empty())
        {
            int size=q.size();//每层的节点个数
            for(int i=0;i<size;i++)//遍历每层
            {
                TreeNode* temp=q.front();
                q.pop();
                if(i==0)
                    res=temp->val;//只更新每层的第一个节点，也就是每层的最左侧节点
                if(temp->left!=NULL)
                    q.push(temp->left);//先左
                if(temp->right!=NULL)
                    q.push(temp->right);//后右
            }
        }
        return res;
    }
};
