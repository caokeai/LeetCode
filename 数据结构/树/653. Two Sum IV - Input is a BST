/*
题目：
Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that 
their sum is equal to the given target.
Example 1:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7
Target = 9
Output: True
Example 2:
Input: 
    5
   / \
  3   6
 / \   \
2   4   7
Target = 28
Output: False
解析：
给定一颗二叉搜索树和一个数值，求二叉搜索树中是否有两个节点的和等于该数值。
二叉搜索树的中序遍历即为有序数组（单调增）。求得有序数组后，再利用双指针求
该有序数组中是否有两个数的和为该数值。
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> arr;
        inOrder(root,arr);//求二叉搜索树的中序遍历即有序数组
        int i=0,j=arr.size()-1;//双指针分别指向数组首尾
        while(i<j)
        {
            if(arr[i]+arr[j]<k)//和小，移动首指针
                i++;
            else if(arr[i]+arr[j]>k)//和大，移动尾指针
                j--;
            else
                return true;//和等于该值，返回true 注意这里的三个条件是互斥的。
        }
        return false;
    }
    void inOrder(TreeNode* root,vector<int>& res)//求二叉树的中序遍历
    {
        if(root==NULL)
            return;
        inOrder(root->left,res);//左
        res.push_back(root->val);//根
        inOrder(root->right,res);//右
    }
};
