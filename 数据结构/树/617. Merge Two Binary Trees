/*
题目：
Given two binary trees and imagine that when you put one of them to cover the other, some nodes of 
the two trees are overlapped while the others are not.
You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then 
sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.
Example 1:
Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
Note: The merging process must start from the root nodes of both trees.
解析：二叉树对应合并，每个对应节点的值相加做为新的二叉树。
方法一：递归
方法二：遍历
*/
//方法一
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL)
            return t2;//树1的对应节点不存在则返回树2的对应节点
        if(t2==NULL)
            return t1;
        t1->val+=t2->val;//树1和树2对应节点都存在时求和
        t1->left=mergeTrees(t1->left,t2->left);//合并左子树
        t1->right=mergeTrees(t1->right,t2->right);//合并右子树
        return t1;
    }
};

//方法二：
