/*
题目：
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
Example:
Input:

   1
    \
     3
    /
   2
Output:
1
Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
Note: There are at least two nodes in this BST.
解析：
二叉搜索树的中序遍历为有序数组。因为有序，所以最小的差一定是相邻元素之间的差。遍历有序数组，求相邻元素之间差的最小值即可。
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        vector<int> arr;
        inOrder(root,arr);
        int res=abs(arr[1]-arr[0]);
        int size=arr.size();
        for(int i=2;i<size;i++)
            res=min(res,abs(arr[i]-arr[i-1]));//因为有序（单调增），所以差的最小值，只求相邻元素的差取最小值即可。
        return res;
    }
    void inOrder(TreeNode* root,vector<int>& v)//中序遍历
    {
        if(root==NULL)
            return;
        inOrder(root->left,v);
        v.push_back(root->val);
        inOrder(root->right,v);
    }
};
