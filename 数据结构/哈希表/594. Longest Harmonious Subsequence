/*
题目：
We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.
Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.
Example 1:
Input: [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
Note: The length of the input array will not exceed 20,000.
解析：
使用哈希表。key值为数组中的数值nums[i]，遍历数组，value为该数值出现的次数。
这里构建哈希表时，必须有初值才能使用at()访问。使用insert或emplace方法均可，但emplace搞笑，且不用使用pair初始化。
注意当哈希表构建完毕后。不要在最大值和最小值之间遍历，那样会增加很多无效的检索。而是对每个nums[i]，检索nums[i]+1和nums[i]-1，
并保存最大值。最后输出最大值即可。
另外。不能使用hash_map<>,而只能使用map（有序表）和unordered_map
*/
class Solution {
public:
    int findLHS(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int size=nums.size();
        unordered_map<int,int> m;
        for(int i=0;i<size;i++)
            m.emplace(nums[i],0);//构建哈希表初值
        for(int i=0;i<size;i++)
            m.at(nums[i])++;//哈希表修改，key值为数值值，value为出现次数
        int res=0;
        for(int i=0;i<size;i++)
        {
            if(m.count(nums[i]+1)!=0)
                res=max(m.at(nums[i])+m.at(nums[i]+1),res);//因为最大最小差值为1，寻找比key大1的value，求和，保留最大值
            if(m.count(nums[i]-1)!=0)
                res=max(m.at(nums[i])+m.at(nums[i]-1),res);//寻找比key小1的value，求和，保留最大值   
        }
        return res;
    }
};
