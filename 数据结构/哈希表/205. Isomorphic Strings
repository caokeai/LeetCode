/*
题目：
Given two strings s and t, determine if they are isomorphic.
Two strings are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while 
preserving the order of characters. No two characters may map to the same character but a character may map to itself.
Example 1:
Input: s = "egg", t = "add"
Output: true
Example 2:
Input: s = "foo", t = "bar"
Output: false
Example 3:
Input: s = "paper", t = "title"
Output: true
Note:
You may assume both s and t have the same length.
解析：
同构字符串即要求每个字符是单映射关系。将第一次出现的映射关系作为基准，判断之后出现的字符是否按照这个映射关系，
若每个都严格按照，即为同构字符串。
如：
"ab"
"aa"不是同构字符串，因为按照映射关系 a与a单映射，而第二个字符a与b映射。
这里的字符是0-255所有字符，可能为大小写字母，符号等。
使用两个int数组，来记录每个对应字符的出现位置。若是出现过的字符，必按照此对应关系。
a    0 0 0 0 
     a b c d
b    0 0 0 0
     a b c d
0-255为字符的本身位置，为key值，value为上一次一次出现的位置。要保证对于每个i对应的字符s[i]和t[i],
如果不是第一次出现，那么s[i]和t[i]的映射关系与s[i-1]和t[i-1]的相同。
如s=“aa”与t=“ab” i=0,i<string.size()
初始值：
a    0 0 0 0 
     a b c d
b    0 0 0 0
     a b c d
i=0  s[i]='a' t[i]='a'
a    1 0 0 0 
     a b c d
b    1 0 0 0
     a b c d
i=1 s[i]='a' t[i]='b'
a['b']=0!=b['a']所以不是一一映射关系。
*/
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.size()!=t.size())
            return false;
        int a[256]={0};//这里全部初始化为相同值，注意如果想与下面的0错开，如全部赋值-1，不能int a[256]={-1}.
        int b[256]={0};//列表初始化，当列表的值小于数组个数时，后面的元素全都会初始化为0.这个错误找了好久才发现。
        int size=s.size();
        for(int i=0;i<size;i++)
        {
            if(a[s[i]]!=b[t[i]])
                return false;
            a[s[i]]=i+1;
            b[t[i]]=i+1;//初始化0与 i=0重复，所以赋值i+1，或者i+2，i+3，只要与i是同增减，且每个i时不同即可。
        }
        return true;
    }
};
