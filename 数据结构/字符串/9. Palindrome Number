/*
题目：
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.
Example 1:
Input: 121
Output: true
Example 2:
Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:
Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
解析：
首先应当将数字转化为字符串，或是/10获取每一位的数字。
*/
//方法一 数字转字符串 双指针遍历
class Solution {
public:
    bool isPalindrome(int x) {
        string s=to_string(x);//x转字符串
        if(s[0]=='-')
            return false;//负数直接返回false
        int i=0,j=s.size()-1;
        while(i<j)
        {
            if(s[i]!=s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
};
//方法二： 双指针法，左指针由x每次/10，右指针由x的位数反转 如321->123
class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0)
            return false;
        if(x==0)
            return true;
        if(x%10==0)
            return false;
        int r=0;//右指针
        while(x>r)
        {
            r=r*10+x%10;//位数反转，低位在高
            x/=10;//左指针x每次/10
        }
        return x==r||r/10==x;//退出循环时，x<=r,所以如果x==r或者 r/10==x都说明x是回文数字。
    }
};
